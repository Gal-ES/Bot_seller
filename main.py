from dotenv import load_dotenv
import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECTING_ACTION, VIEWING_CATALOG, VIEWING_CART, CHECKOUT, SUPPORT = range(5)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
products = {
    1: {"name": "–§—É—Ç–±–æ–ª–∫–∞", "price": 1500, "description": "–•–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞"},
    2: {"name": "–î–∂–∏–Ω—Å—ã", "price": 3000, "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã"},
    3: {"name": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "price": 5000, "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏"},
}

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_carts = {}
order_history = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='view_cart')],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='view_orders')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
        reply_markup=reply_markup
    )
    
    return SELECTING_ACTION

async def view_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    keyboard = []
    for product_id, product in products.items():
        keyboard.append(
            [InlineKeyboardButton(
                f"{product['name']} - {product['price']/100:.2f} —Ä—É–±.", 
                callback_data=f'product_{product_id}'
            )]
        )
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    
    await query.edit_message_text(
        text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return VIEWING_CATALOG

async def view_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[1])
    product = products[product_id]
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_{product_id}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='view_catalog')]
    ]
    
    await query.edit_message_text(
        text=f"üõçÔ∏è {product['name']}\n\n"
             f"üí∞ –¶–µ–Ω–∞: {product['price']/100:.2f} —Ä—É–±.\n\n"
             f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return VIEWING_CATALOG

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    query = update.callback_query
    await query.answer()
    
    product_id = int(query.data.split('_')[1])
    product = products[product_id]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    user_id = update.effective_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {}
    user_carts[user_id][product_id] = user_carts[user_id].get(product_id, 0) + 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        [InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='view_cart')],
        [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='view_catalog')]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_text(
        text=f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_ACTION

async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})
    
    if not cart:
        await query.edit_message_text(
            text="üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')]
            ]))
        return VIEWING_CART
    
    total = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for product_id, quantity in cart.items():
        product = products[product_id]
        item_total = product['price'] * quantity
        total += item_total
        cart_text += f"{product['name']} - {quantity} —à—Ç. √ó {product['price']/100:.2f} —Ä—É–±. = {item_total/100:.2f} —Ä—É–±.\n"
    
    cart_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total/100:.2f} —Ä—É–±."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    product_buttons = [
        [InlineKeyboardButton(
            f"‚ùå –£–¥–∞–ª–∏—Ç—å {products[pid]['name']}", 
            callback_data=f'remove_{pid}'
        )] for pid in cart.keys()
    ]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = [
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')],
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
        [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    
    await query.edit_message_text(
        text=cart_text,
        reply_markup=InlineKeyboardMarkup(product_buttons + control_buttons)
    )
    
    return VIEWING_CART

async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})
    
    if not cart:
        await query.edit_message_text(text="üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return VIEWING_CART
    
    total = sum(products[pid]['price'] * qty for pid, qty in cart.items())
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ user_data –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    context.user_data['cart'] = cart.copy()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='confirm_order')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order')]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_text(
        text=f"üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
             f"–¢–æ–≤–∞—Ä–æ–≤: {sum(cart.values())} —à—Ç.\n"
             f"–°—É–º–º–∞: {total/100:.2f} —Ä—É–±.\n\n"
             f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHECKOUT

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    cart = context.user_data['cart']
    
    if user_id not in order_history:
        order_history[user_id] = []
    
    order_history[user_id].append({
        'items': cart.copy(),
        'total': sum(products[pid]['price'] * qty for pid, qty in cart.items()),
        'status': '–ó–∞–≤–µ—Ä—à–µ–Ω'
    })
    
    user_carts[user_id] = {}
    
    await query.edit_message_text(
        text="‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='view_orders')]
        ]))
    
    return SELECTING_ACTION

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–æ–≤–∞—Ä—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='view_cart')],
            [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')]
        ])
    )
    return SELECTING_ACTION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='back_to_main')]
        ])
    )
    return ConversationHandler.END

async def view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    orders = order_history.get(user_id, [])
    
    if not orders:
        await query.edit_message_text(
            text="üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')]
            ]))
        return SELECTING_ACTION
    
    orders_text = "üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n"
    for i, order in enumerate(orders, 1):
        orders_text += f"–ó–∞–∫–∞–∑ #{i}\n"
        for pid, qty in order['items'].items():
            orders_text += f"- {products[pid]['name']} √ó {qty}\n"
        orders_text += f"–°—É–º–º–∞: {order['total']/100:.2f} —Ä—É–±.\n–°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
    
    await query.edit_message_text(
        text=orders_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ])
    )
    
    return SELECTING_ACTION

async def remove_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    product_id = int(query.data.split('_')[1])
    
    if user_id in user_carts and product_id in user_carts[user_id]:
        del user_carts[user_id][product_id]
        if not user_carts[user_id]:  # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            del user_carts[user_id]
    
    await view_cart(update, context)  # –ü–æ–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã
    return VIEWING_CART

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data='confirm_clear')],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='back_to_cart')]
        ])
    )
    return VIEWING_CART

async def confirm_clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id in user_carts:
        del user_carts[user_id]
    
    await query.edit_message_text(
        text="üßπ –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')],
            [InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='back_to_main')]
        ])
    )
    return SELECTING_ACTION  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

async def back_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏"""
    query = update.callback_query
    await query.answer()
    await view_cart(update, context)
    return VIEWING_CART

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='view_cart')],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='view_orders')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
    ]
    
    await query.edit_message_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_ACTION

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
             "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º.\n"
             "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ])
    )
    return SUPPORT

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞—Ç–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    user = update.message.from_user
    message_text = update.message.text
    
    logger.info(f"–í–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user.full_name}: {message_text}")
    
    await update.message.reply_text(
        text="‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n"
             "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='view_catalog')],
            [InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='back_to_main')]
        ])
    )
    return SELECTING_ACTION

def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ.")
    update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("/start", callback_data='start')]
        ])
    )
    
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    
    if isinstance(update, Update):
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ Application
        application = Application.builder().token(TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        SELECTING_ACTION: [
            CallbackQueryHandler(view_catalog, pattern='^view_catalog$'),
            CallbackQueryHandler(view_cart, pattern='^view_cart$'),
            CallbackQueryHandler(view_orders, pattern='^view_orders$'),
            CallbackQueryHandler(support, pattern='^support$'),
            CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
        ],
        VIEWING_CATALOG: [
            CallbackQueryHandler(view_product, pattern='^product_'),
            CallbackQueryHandler(add_to_cart, pattern='^add_'),
            CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
        ],
        VIEWING_CART: [
            CallbackQueryHandler(remove_from_cart, pattern='^remove_'),
            CallbackQueryHandler(clear_cart, pattern='^clear_cart$'),
            CallbackQueryHandler(confirm_clear_cart, pattern='^confirm_clear$'),
            CallbackQueryHandler(back_to_cart, pattern='^back_to_cart$'),
            CallbackQueryHandler(view_catalog, pattern='^view_catalog$'),
            CallbackQueryHandler(checkout, pattern='^checkout$'),
            CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
        ],
        CHECKOUT: [
            CallbackQueryHandler(confirm_order, pattern='^confirm_order$'),
            CallbackQueryHandler(cancel_order, pattern='^cancel_order$'),
        ],
        SUPPORT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_support_message),
            CallbackQueryHandler(back_to_main, pattern='^back_to_main$'),
        ],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)
        
        application.add_handler(conv_handler)
        application.add_error_handler(error_handler)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()